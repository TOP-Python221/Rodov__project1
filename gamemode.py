"""Дополнительный модуль: подготовка игрового процесса."""

import config


# ИСПРАВИТЬ: на текущий момент функция ничего не возвращает — исправить аннотацию
def game_mode() -> str:
    """Запрашивает режим для новой партии, добавляет имя бота либо второго игрока в глобальную переменную текущих игроков, запрашивает очерёдность ходов."""
    # УДАЛИТЬ: такой переменной нет на глобальном уровне и не должно быть
    global name
    mode = input('Введите режим игры (single - с ботом или double - с другим пользователем): ')
    if mode.lower() == 'single':
        get_difficultly_level()
    elif mode.lower() == 'double':
        # ИСПРАВИТЬ: внимательнее: ваша функция get_player_name() сама запрашивает у игрока имя, нет нужды передавать в неё имя игрока
        name = get_player_name(input('Введите имя игрока: '))
    # ИСПРАВИТЬ: либо сделайте переменную config.PLAYERS списком, либо используйте конкатенацию кортежей
    config.PLAYERS.append(name)


# ИСПРАВИТЬ: зачем передавать имя аргументом в функцию, которая сама запрашивает имя?
def get_player_name(name) -> None:
    """Запрашивает имя игрока, проводит валидацию и, при необходимости, добавляет новый элемент в config.STATS"""
    while True:
        player_name = input('Введите имя пользователя: ')
        # ДОБАВИТЬ: проверку на неравенство введённого имени именам ботов
        if player_name:
            break
        else:
            print('Введите не пустую строку!')
    # КОММЕНТАРИЙ: далее всё хорошо
    # проверяет присутствие этого имени в config.STATS
    if player_name not in config.STATS:
        # создаёт запись о новом игроке в config.STATS
        config.STATS[player_name] = {'training': True,
                                     'stats': {'wins': 0, 'ties': 0, 'fails': 0}}
    config.PLAYERS.append(player_name)


def get_difficultly_level():
    """Запрашивает у пользователя уровень сложности для игры с ботом."""
    level = input('Type difficult level of game(easy or hard)')
    if level == 'easy':
        # УДАЛИТЬ: функции ai.easy_mode() и ai.hard_mode() используются для расчёта хода во время партии — а мы здесь настройкой партии занимаемся
        ai.easy_mode()
        # ДОБАВИТЬ: нужную запись в переменную config.PLAYERS
    if level == 'hard':
        ai.hard_mode()


# КОММЕНТАРИЙ:
#  в двойные кавычки мы помещаем строки документации — это строковые литералы, вычисляемые интерпретатором;
#  комментарии мы пишем после символа # — это текст полностью игнорируемый интерпретатором;
#  не путайте больше эти два явления


# КОММЕНТАРИЙ: все тесты убираются под проверку имени модуля, чтобы они не выполнялись, когда данный модуль импортируется
# тесты
if __name__ == '__main__':
    game_mode()
